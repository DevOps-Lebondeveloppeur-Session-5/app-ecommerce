name: CI/CD app-e-commerce

env:
    IMAGE_NAME: talel12/e-commerce-front

on:
    push:
        branches:
            - main

jobs:
    unit-test-job:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Install dependencies
          run: npm install

        - name: Run static code analysis
          run: |
            mkdir -p test-reports
            npm run test -- --json --outputFile=test-reports/test-report.json

        - name: Upload test report as artifact
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: test-report
            path: test-reports/test-report.json

        - name: Fail the workflow if tests failed
          if: failure()
          run: exit 1

    build-and-push:
        runs-on: ubuntu-latest
        needs: unit-test-job
        steps:
            - name: checkout repository
              uses: actions/checkout@v4

            - name: build image
              run: docker build -t ${{ env.IMAGE_NAME}} --build-arg API_URL=${{ vars.API_URL }} .

            - name: login to docker-hub
              uses: docker/login-action@v3
              with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: push image to dockerhub repository
              run: docker push ${{ env.IMAGE_NAME}}

            - name: tag image by version
              run: docker tag ${{ env.IMAGE_NAME}} ${{ env.IMAGE_NAME}}:${{ github.run_number }}

            - name: push image with version to dockerHub repository
              run: docker push ${{ env.IMAGE_NAME}}:${{ github.run_number }}
    
    deploy-to-vps:
        needs: build-and-push
        runs-on: ubuntu-latest
        steps:
            - name: deploy image
              uses: appleboy/ssh-action@v1.2.0
              with:
                host: ${{ secrets.VPS_HOST }}
                username: ${{ vars.VPS_USERNAME }}
                password: ${{ secrets.VPS_PASSWORD }}
                script: |
                    cd /home/ubuntu/devops-ecommerce/ecommerce-front
                    sudo git pull
                    sudo docker compose pull
                    sudo docker compose up -d --force-recreate --remove-orphans